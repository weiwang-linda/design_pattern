工厂模式

出现工厂模式的原因：
	除了使用new方法之外，还有更多制造对象的方法。实例化这个活动不应该总是公开的进行，初始化经常造成“耦合”问题。
	在使用new的时候，意味着实例化类生成对象，所以就意味着针对实现编程，导致代码更脆弱，缺乏弹性。如果改为针对接口编程，可以隔离以后系统可能发生的一大堆改变。一旦加入新的具体类，就不用修改代码。如何将实例化具体类的代码从应用中抽离，或者封装起来，使他们不会干扰应用的其他部分。


采用比萨店的例子来说明工厂模式.
	1. 例1：订购皮萨，皮萨店需要准备、烘培、切割、包装等工序.
	2. 例2：需要更多皮萨类型，再制造.
	3. 例3：运用设计原则将变化的部分和不变的部分分离。
	4. 例4：扩展皮萨店，皮萨加盟店出现，如何解决订单问题。
	5. 

工厂方法模式定义：
	所有工厂模式都用来封装对象的创建。通过让子类决定该创建的对象是什么，来达到将对象创建的过程封装的目的。
	工厂方法模式定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。
	将一个orderPizza()和一个工厂方法联合起来，就可以成为一个框架，工厂方法将生产知识封装进各个创建者，这样的做法，也可以被视为是一个框架。

	1. 当具体创建者只有一个时候，工厂方法模式依然很有用，它帮我们将产品的实现从使用中解耦。
	2. 简单工厂模式中，工厂是另一个由PizzaStore使用的对象, 和最终的工厂方法模式有用法上的区别.
	3. 工厂方法并不总是抽象的，可以定义一个默认的工厂方法来产生某些具体的产品，即使创建者没有任何子类，依然可以创建产品。
	4. 工厂方法带有参数的称为参数化工厂方法，也可以不带参数使得工厂只产生一种对象。
	5. 简单工厂类不能变更正在创建的产品，所以没有工厂方法有弹性。

OO设计原则---依赖倒置原则
	要依赖抽象，不要依赖具体类.
	不能让高层组件依赖低层组件，不管高层组件或低层组件都应该依赖于抽象。
